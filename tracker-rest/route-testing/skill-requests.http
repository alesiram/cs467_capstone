### CREATED BY GPT 4.0

### Request 0: Register a New User 'skilluser'
POST http://localhost:3000/users/register HTTP/1.1
Content-Type: application/json

{
  "username": "skilluser",
  "password": "Password123"
}

### Request 0.1: Login as 'skilluser'
POST http://localhost:3000/users/login HTTP/1.1
Content-Type: application/json

{
  "username": "skilluser",
  "password": "Password123"
}

### Use the token provided from the login response in the Authorization header for the following requests.

### Request 1.11: Create a Contact to link
POST http://localhost:3000/contacts HTTP/1.1
content-type: application/json
Authorization: Bearer <Token>

{
    "name": "John Doe",
    "company": "ABC Corp",
    "email": "john.doe@example.com",
    "contactType": "Recruiter"
}

### Request 1.12: Create a New Skill for 'skilluser' with a Reference
POST http://localhost:3000/skills HTTP/1.1
Content-Type: application/json
Authorization: Bearer <Token>

{
  "name": "JavaScript",
  "rating": 5,
  "reference": "<CONTACT ID>"
}

### Request 1.13: Create another Skill for 'skilluser' with a Reference
POST http://localhost:3000/skills HTTP/1.1
Content-Type: application/json
Authorization: Bearer <Token>

{
  "name": "Python",
  "rating": 3,
  "reference": "<CONTACT ID>"
}

### Request 1.14: Create another Skill for 'skilluser' without a Reference
POST http://localhost:3000/skills HTTP/1.1
Content-Type: application/json
Authorization: Bearer <Token>

{
  "name": "ABCs",
  "rating": 1,
  "reference": "<CONTACT ID>"
}

# Request 1.21: Search for a Skill by name
#GET http://localhost:3000/skills?search=JavaScript HTTP/1.1
#Authorization: Bearer <Token>

# Request 1.22: Search by Contact name
#GET http://localhost:3000/skills?contactName=John Doe HTTP/1.1
#Authorization: Bearer <Token>


# Request 1.3: Sort the Skills by rating
#GET http://localhost:3000/skills?sortBy=rating&order=asc HTTP/1.1
#Authorization: Bearer <Token>

# Request 1.4: Filter the ratings (should only return Python)
#GET http://localhost:3000/skills?minRating=2&maxRating=4 HTTP/1.1
#Authorization: Bearer <Token>

# Request 1.5: Combine all search, sort, and filter checks
#GET http://localhost:3000/skills?search=JavaScript&sortBy=rating&order=desc&minRating=4 HTTP/1.1
#Authorization: Bearer <Token>

### Request 2: Retrieve All Skills for 'skilluser'
GET http://localhost:3000/skills HTTP/1.1
Authorization: Bearer <Token>

### Request 3: Retrieve a Specific Skill for 'skilluser'
GET http://localhost:3000/skills/<Skill_ID> HTTP/1.1
Authorization: Bearer <Token>

### Request 4: Update a Specific Skill for 'skilluser'
PUT http://localhost:3000/skills/<Skill_ID> HTTP/1.1
Content-Type: application/json
Authorization: Bearer <Token>

{
  "name": "Advanced JavaScript",
  "rating": 5,
  "reference": "Jane Smith"
}

### Request 5: Delete a Specific Skill for 'skilluser'
DELETE http://localhost:3000/skills/<Skill_ID> HTTP/1.1
Authorization: Bearer <Token>

